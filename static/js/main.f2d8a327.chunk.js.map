{"version":3,"sources":["components/contactForm/index.jsx","components/Filter/index.jsx","components/contactList/index.jsx","components/App/index.jsx","index.js"],"names":["ContactForm","state","name","number","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","contacts","find","contact","contactToAdd","alert","this","className","onSubmit","type","required","onChange","Component","Filter","filterValue","contactList","onChangeFilter","length","ContactList","onHandleDeleteContact","onFilteredContacts","map","key","id","onClick","App","filter","toAddContact","v4","prevState","changeFilter","handleDeleteContact","JSON","parse","localStorage","getItem","setItem","stringify","filteredContacts","toLowerCase","includes","filterContacts","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2d8a327.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './styles.scss';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    contactToAdd: propTypes.func.isRequired,\r\n  };\r\n\r\n  handleChange = ({ target: { value, name } }) =>\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const prevValue = this.props.contacts.find(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n    if (!prevValue) {\r\n      this.props.contactToAdd({ ...this.state });\r\n      this.setState({\r\n        name: '',\r\n        number: '',\r\n      });\r\n      return;\r\n    }\r\n\r\n    alert(`${this.state.name} is already in contacts`);\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"contactForm\" onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className=\"contactFormInput\"\r\n            type=\"text\"\r\n            required\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className=\"contactFormInput\"\r\n            type=\"number\"\r\n            name=\"number\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className=\"contactFormButton\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Filter = ({ filterValue, contactList, onChangeFilter }) =>\r\n  contactList.length > 2 && (\r\n    <label>\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={filterValue}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n\r\nFilter.propTypes = {\r\n  filterValue: propTypes.string.isRequired,\r\n  contactList: propTypes.array.isRequired,\r\n  onChangeFilter: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './styles.scss';\r\nconst ContactList = ({ onHandleDeleteContact, onFilteredContacts }) => (\r\n  <ul className=\"contactList\">\r\n    {onFilteredContacts.map(contact => (\r\n      <li className=\"contactListItem\" key={contact.id}>\r\n        <p>\r\n          {contact.name}: {contact.number}\r\n        </p>\r\n        <button\r\n          className=\"contactListButton\"\r\n          onClick={() => onHandleDeleteContact(contact.id)}\r\n          type=\"button\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onHandleDeleteContact: propTypes.func.isRequired,\r\n  onFilteredContacts: propTypes.arrayOf(\r\n    propTypes.shape({\r\n      id: propTypes.string.isRequired,\r\n      name: propTypes.string.isRequired,\r\n      number: propTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport ContactForm from '../contactForm/index';\r\nimport Filter from '../Filter/index';\r\nimport ContactList from '../contactList/index';\r\nimport { v4 } from 'uuid';\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nexport default class App extends Component {\r\n  static defaultProps = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n  };\r\n\r\n  static propTypes = {\r\n    contacts: propTypes.arrayOf(\r\n      propTypes.shape({\r\n        id: propTypes.string.isRequired,\r\n        name: propTypes.string.isRequired,\r\n        number: propTypes.string.isRequired,\r\n      }),\r\n    ),\r\n  };\r\n\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.state.contacts.length) {\r\n      const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n      if (contacts) {\r\n        this.setState({ contacts });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState.contacts.length !== this.state.contacts.length) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  toAddContact = state => {\r\n    const contactToAdd = {\r\n      ...state,\r\n      id: v4(),\r\n    };\r\n    this.setState(prevState => ({\r\n      contacts: [...prevState.contacts, contactToAdd],\r\n    }));\r\n  };\r\n\r\n  changeFilter = ({ target: { value } }) => {\r\n    this.setState({ filter: value });\r\n  };\r\n\r\n  handleDeleteContact = id => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const filteredContacts = filterContacts(contacts, filter);\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm contacts={contacts} contactToAdd={this.toAddContact} />\r\n        <h2>Contacts</h2>\r\n        <Filter\r\n          filterValue={filter}\r\n          contactList={contacts}\r\n          onChangeFilter={this.changeFilter}\r\n        />\r\n\r\n        {contacts.length > 0 && (\r\n          <ContactList\r\n            onHandleDeleteContact={this.handleDeleteContact}\r\n            onFilteredContacts={filteredContacts}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}